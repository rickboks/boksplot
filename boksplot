#!/bin/bash
#Default values

check_exists(){
	if [[ ! -e $1 ]]
	then
		echo "Error: file \"$1\" does not exists"
		exit
	fi 
}

is_set(){
	eval '[ ${'$2'[$1]+isset} ]'
}

parse_user_title_command(){
	local words=( "$@" )
	local len_arr=$(( ${#words[@]}))
		
	if [[ $len_arr == 2 ]]; then
		global_options["title"]=${words[1]}
	else
		echo "Usage: title <title>"
	fi
}

request_line_titles(){
	for ((i = 1; i <= num_lines; i++))
	do
		echo -n "Name of line $i: "
		read linetitle
		line_options[${i}title]=$linetitle
	done
}

get_plotfile_path(){
	file_noex=$(cut -d. -f1 <<< $filename)
	counter=1
	candidate="$parent_dir/$file_noex.gpi"
	while [[ -e $candidate ]]; do
		candidate=$present_dir/$file_noex-$counter.gpi
		counter=$(( counter + 1 ))
	done
	plotfile=$candidate
}

# this should handle whether its line or dots or whatever
handle_line_type(){
	echo -n "with lines " >> "$plotfile"
}

handle_line_styles(){
	for ((i=1; i <= num_lines; i++)); do
		echo -n "set style line $i " >> "$plotfile"
		for option in "${line_styling_options[@]}"; do
			val=${option_defaults[$option]}
			if is_set "${i}$option" line_options; then
				val=${line_options["${i}${option}"]}
			fi
			echo -n "$option $val " >> "$plotfile"
		done
		echo "" >> "$plotfile"
	done
}

create_plotfile(){
	#echo "set terminal wxt" > "$plotfile"
	echo "filename = \"$fullpath\"" > "$plotfile"

	if is_set "title" global_options; then
		echo "set title \"${global_options[title]}\"" >> "$plotfile"
	fi

	# Output line titles
	for ((i=1; i <= num_lines; i++)); do
		local title=${option_defaults["title"]}
		if is_set "${i}title" line_options; then title=${line_options["${i}title"]};fi
		echo "title$i = \"$title\"" >> "$plotfile"
	done

	handle_line_styles

	# Plot command
	for ((i=1; i<= num_lines; i++)); do
		if [[ $i == 1 ]]; then
			echo -n "plot " >> "$plotfile"
		fi

		local style=${option_defaults["style"]}
		if is_set "${i}style" line_options; then
			style=${line_options[${i}style]}
		fi
			
		echo -n "filename using $((i+1)) title title$i ls $i with $style" >> "$plotfile"

		if [[ $i != $num_lines ]]; then
			echo ", \\" >> "$plotfile"	
		fi
	done
}

is_number(){
	re='^[0-9]+$'
	if [[ $1 =~ $re ]] ; then
		return 0
	fi

	return 1
}

parse_user_command(){
	local words=( "$@" )
	local len_arr=$(( ${#words[@]} -1 ))
	local arg_start=$((len_arr+1))	
	if [[ $len_arr == 2 ]]; then
		local val=${words[1]}
		if ! is_number $val; then echo "invalid argument: $val"; return; fi
		for ((i=1; i<=num_lines; i++)); do
			line_options[${i}${!arg_start}]=$val
		done
	elif [[ $len_arr == 3 ]]; then
		if [[ ${words[1]} -le num_lines ]] && [[ ${words[1]} > 0 ]]; then
		local val=${words[2]}
		if ! is_number $val; then echo "invalid argument: $val"; return; fi
		line_options[${words[1]}${!arg_start}]=$val
		else
			echo "Line index out of bounds"
		fi
	else
		echo "Too many arguments"
	fi
}

parse_user_color_command(){
	local words=( "$@" )
	local len_arr=$(( ${#words[@]} -1 ))
	local arg_start=$((len_arr+1))	
	if [[ $len_arr == 2 ]]; then
		local val=${words[1]}
		for ((i=1; i<=num_lines; i++)); do
			line_options[${i}${!arg_start}]="\"$val\""
		done
	elif [[ $len_arr == 3 ]]; then
		local val=${words[2]}
		local index=${words[1]}
		line_options[$index${!arg_start}]="\"$val\""
	else
		echo "Too many arguments"
	fi
}

set_random_colors(){
	for((i=1;i<=num_lines;i++)); do
		local length=${#legal_colors[@]}
		local rand=$[$RANDOM % $length]
		local color=${legal_colors[$rand]}				
		line_options["${i}lc rgb"]="\"$color\""
	done
}

parse_user_style_command(){
	local words=( "$@" )
	local len=${#words[@]}
	if [[ $len == 2 ]]; then
		local val=${words[1]}
		for ((i=1; i<=num_lines; i++)); do
			line_options[${i}style]=$val
		done
	elif [[ $len == 3 ]]; then
		local val=${words[2]}
		line_options[${words[1]}style]=$val
	else
		echo "Too many arguments"
	fi
}

plot(){
	gnuplot -p "$plotfile"
}

help(){
	echo "not yet implemented"
}

interactive_mode(){
	while [[ true ]]; do
		words=()
		echo -n "> "
		read input
		for word in $input; do
			words+=( $word )
		done
		case ${words[0]} in 
			exit)
				exit
				;;
			plot)
				create_plotfile
				plot
				;;
			width | size)
				parse_user_command ${words[@]} "lw"
				parse_user_command ${words[@]} "ps"
				;;
			color)
				parse_user_color_command ${words[@]} "lc rgb"
				;;
			style)
				parse_user_style_command ${words[@]}
				;;
			help)
				help
				;;
			names)
				request_line_titles
				;;
			title)
				parse_user_title_command ${words[@]}
				;;
			*)
				echo "invalid command"
				;;
		esac
	done
}

source constants.env

lineTitles=()
inputfile=$1
present_dir=$(pwd)
fullpath=$present_dir/$inputfile
check_exists $fullpath
parent_dir=$(dirname $fullpath)
filename=$(basename $fullpath)
get_plotfile_path
num_colums=$(head -n1 $fullpath | awk '{print NF}')
num_lines=$(( num_colums - 1))

set_random_colors

######################################################

echo "Welcome to Boksplot!"
interactive_mode
